buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.18"
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.4"
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://packages.confluent.io/maven' }
        jcenter()
    }
}

project(":app") {
    ext {
        sourceSetTypes = ["java", "spring-boot-lib", "application", "integration-test", "jpa"]
    }
}

configure(subprojects.findAll { it.sourceSetTypes.contains("java") }) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'net.ltgt.apt-idea'
    apply plugin: 'com.github.sherter.google-java-format'

    dependencies {
        compile group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
        annotationProcessor 'org.projectlombok:lombok:1.18.2'

        compile 'org.modelmapper:modelmapper:2.3.0'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.assertj', name: 'assertj-core', version: '3.10.0'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.19.0'
    }
}

configure(subprojects.findAll { it.sourceSetTypes.contains("spring-boot-lib") }) {

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
        compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: springBootVersion

        compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: springBootVersion
    }
}

//configure(subprojects.findAll { it.sourceSetTypes.contains("spring-boot-test") }) {
//
//    dependencies {
//        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
//            exclude group: "org.mockito"
//        }
//    }
//}

configure(subprojects.findAll { it.sourceSetTypes.contains("application") }) {
    apply plugin: 'application'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-manangement'

    jar {
        enabled = true
    }
    bootJar {
        classifier = 'boot'
    }
}


configure(subprojects.findAll { it.sourceSetTypes.contains("jpa") }) {
    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion
        compile group: 'org.springframework', name: 'spring-jdbc', version: '5.0.7.RELEASE'

        compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.3.Final'
        compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
        compile group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.2.2'
    }
}

configure(subprojects.findAll { it.sourceSetTypes.contains("integration-test") }) {
    apply plugin: 'docker-compose'

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources {
                srcDirs = [file('src/integration-test/resources'), file('src/test/resources')]
            }
        }
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    task integrationTestCI(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
    }

    dockerCompose.isRequiredBy(integrationTest)
}

/**
 * Gradle wrapper.
 */
wrapper {
    gradleVersion = '4.8.1'
}
